=== 蓝牙问题报告2 ===
1.can总线无法发出数据的问题
dji的设计中，主控，蓝牙，电台等是挂在can总线上，所有的通信都是通过can总线；

测试了连续发包导致无法收到ack报文，ble蓝牙断开等问题

测试了touch连续发包（也就是调参软件的view等页面的通信需求），导致无法收到ack报文，ble断开的问题。结果是can总线上无法测试到主控发出的ack报文，但是ble通过can总线发给主控的信息仍然能够测到。

这样基本可以肯定是can总线，或者主控出了问题；暂时未找到导致该问题的原因；


2.主控扫描失败率高的问题
在对某个蓝牙进行测试时，出现了扫描失败率高的问题，失败率达到30％以上；

该问题具体来说是在连接上ble之后，无法获取ble的device信息，导致无法扫描到主控；最后确定是ble蓝牙模块的问题，可能是该蓝牙的硬件设计，天线设计等问题，在以后的量产，封装设计等方面，肯定需要考虑和测试该问题；

在这里记下备忘；

3.断开ble连接的问题

使用ios的库函数cancelPeripheralConnection断开一个主控的连接时，需要等待一段时间（5s以上），并且不一定能够成功。

dji工程师设计了另外一个断开的办法，直接对ble的特征（0x33ff）写入字符xp，由ble上的软件控制断开连接。

该方法已经写入了通信库中，但是如果出现上面2所提到的主控扫描失败率高的问题时，就可能再也无法断开该ble主控，需要等待使用ios库函数cancelPeripheralConnection来断开连接；


=== 蓝牙问题报告3 ===
对于报告2中的“2.主控扫描失败率高的问题，3.断开ble连接的问题”的补充和修正：

今天将新的通信库继承到调参软件后测试发现，使用了dji工程师提供的断开方式之后（直接对ble的特征0x33ff写入字符xp），主控的连接失败率会很高。

调试发现，主控连接失败率高的原因还是出在无法获得device信息，和主控扫描失败率高存在同样的地方（ios的库级别）。

最后删除了对0x33ff特征的直接写。

一些结论和思考：
1.出现该问题的原因猜测：ios的蓝牙库和蓝牙fireware的内部断开是重复的，可能导致了一些不可控制的问题。例如直接对特征0x33ff写入字符xp之后，ios库并不知道ble内部已经自动断开了，所以出现了问题；
2.建议我们的蓝牙模块的设计，参考了苹果公司发布的《Bluetooth Accessory Design Guidelines for Apple Products》；
