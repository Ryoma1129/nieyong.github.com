这里纪录调参app开发中几个奔溃bug，这些bug或者有典型性，或者花费了很大的精力，当引以为戒。

== 内存消耗殆尽 ==
bug描述：在view页面，长期放置，则会出现拖动迟钝的问题，最后导致整个app奔溃；

bug调试过程：
* 使用工具Xcode盒Instruments跟踪view页面内存泄漏，结果未发现有泄漏内存；
* 使用Organizer导出奔溃的crash文件，可以看到，确实是View页面导致内存耗尽引起的系统将调参app停止；
* 跟踪view页面的代码，发现是在` - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath`中存在cell申请了而不使用，重新申请新的内存，这样就导致了view页面反复申请cell对象而不使用，结果内存就消耗殆尽；

教训：在tableView页面，cell的使用一定要注意，很容易出现各种问题；

== foreach循环中删除了数组元素 ==
bug描述：在device list页面，当出现多个主控的时候，就可能出现奔溃的问题；

bug调试过程：
* 联机调试，发现下面这样一段错误信息。
{{{name="code" class="c"
[9737:907] *** Terminating app due to uncaught exception 'NSGenericException', reason: '*** Collection <__NSArrayM: 0x2005ca50> was mutated while being enumerated.'
*** First throw call stack:
(0x38eeb2a3 0x3721597f 0x38eead85 0xb7e9b 0x3a9cd74b 0x38ec05df 0x38ec0291 0x38ebef01 0x38e31ebd 0x38e31d49 0x37c682eb 0x3a4032f9 0xaf337 0xaf2d8)
libc++abi.dylib: terminate called throwing an exception
}}}

教训：
* 这个bug花费了不少时间，主要有几个原因：一是不知道这个提示信息基本上就是对应foreach循环；二是bug复现比较难，而且寻找的范围广，担心是通信库中的代码问题；
* foreach循环中不能够增删数组元素，下面代码是不正确的：
{{{name="code" class="c"
    //使用_scanMainCtrlPerpherils的结果更新_mainCtrlPerpherils
    BOOL isScaned;
    int count = [self.MainCtrlPerpherals count];
    for(MainControllerPeripheral* mc in self.MainCtrlPerpherals){
	isScaned = NO;
	MainControllerPeripheral* mc = [self.MainCtrlPerpherals objectAtIndex:iter];
	
	for (MainControllerPeripheral* newMc in self.scanMainCtrlPerpherils) {
	    if ([mc.hardwareID isEqualToData:newMc.hardwareID]) {
		//同一个主控，在新的一次扫瞄中又扫到
		isScaned = YES;
		break;
	    }
	}
	
	if (NO == isScaned) {
	    //该主控在新的一次扫瞄中不存在，则删除
	    NSLog(@"delete ble");
	    [self.MainCtrlPerpherals removeObject:mc];
	}
    }
}}}

== standardUserDefaults返回的对象都是immutable ==
bug描述：app在实地调参之后，奔溃了

bug调试过程：
* 使用Organizer导出奔溃的crash文件，并且反汇编符号化，可以看到代码出错的函数。跟踪改函数，可以看到如此下面的异常提示：
{{{name="code" class="c"
Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: '-[__NSCFArray insertObject:atIndex:]: mutating method sent to immutable object'
}}}

教训：
* 需要学会使用app的crash log纪录来跟踪奔溃问题
* standardUserDefaults返回的对象都是immutable，虽然将返回指针付给了NSMutableArray类型的指针；
{{{name="code" class="c"
 NSMutableArray * activeMainCtrl = [[NSUserDefaults standardUserDefaults] objectForKey:@"activeMainCtrl"];		//activeMainCtrl是immutable的
 NSMutableArray* activeMainCtrl = [NSMutableArray arrayWithArray:[[NSUserDefaults standardUserDefaults] objectForKey:KEY_STATISTICMAINCTL]];			//activeMainCtrl是mutable的
}}}

