== 2.27 ==
今天偶遇一篇关于retina屏幕开发的博文，和大家分享一下。

[[ http://iblog.tencent.com/mac-retina-guide/|Mac平台retina高分屏开发技术分享]]。

下面是我摘抄的一些技术点，有些点的理解可能还不够到位，欢迎大家指正。

* 系统对高分屏的支持上，Mac OS和iOS基本上是一样的：都是两倍的Scale Factor，都是系统自动来完成这个Scaling。
* Point是苹果给的定义，指用户空间的一个单位。在普通屏上，Point和Pixel是一比一的关系，而在高分屏上，它们的关系是一比四。这点Mac和iOS是一样的。
* 大部分情况下，我们根本不需要去考虑Pixel，因为我们程序中用到的坐标基本上都是以Point为单位的。

终于明白，为什么在代码中设置大小时，都是以320的宽度值作为屏幕的最大宽度。

== 3.14 ==
这段时间一直都在思考不同项目代码的管理到底是使用宏来区分还是使用分支来管理。例如需要在wm调参的基础上开发nm，又例如ble通信库需要同时支持地面站和调参，还要考虑wm和nm的支持的不同。

下面是自己总结的各自的优缺点：

使用编译宏：
* 有差异的代码有对比，阅读起来连贯并且逻辑清晰
* 公共bug的修复无需考虑同步问题，一举多得
* 对于ui等大面积的修改，可能会相互影响，不好维护

使用分支：
* 公共bug的修复需要同步（这一点最恼火）
* 需要在分支之间切换，麻烦
* 有差异的代码部分没有了对比，可能会增大理解难度
* 不同项目或者产品比较独立和清晰

我想到的是这些，欢迎大家讨论；

现在调参app使用的是分支管理，ble库计划使用编译宏。
