更多详细使用，参考[[wiki_ny/git|Nie Yong Note's Git]]。

* [[wiki_ny/git基本配置记录]]
* [[wiki_ny/git基本概念记录]]

== 删除某一次提交 ==
* `git reset HEAD^` 	//回退第一个记录 
* `git reset HEAD~2` 	//回退第二个记录 
* `git reset --hard HEAD~2` 	//回退第二个记录，工作目录下的文件也回退

使用`git reset`或者`git revert`命令。注意两点：
# `git reset`和`git revert`的区别，`git reset`是直接删除提交记录进行回溯，在graph上可以看到，被回溯的那几个提交记录已经不再任何分支的控制范围内。在这种情况下，默认情况下，是无法看到这几次提交的记录的。而`git revert`是使用一次相反的提交覆盖上次提交；
# `git reset`命令有3个重要的参数，分别是--mixed（默认）、--soft、--hard：
    * 其中--hard选项会造成修改内容不可恢复的后果，原因是该选项会将当前HEAD所指的内容覆盖掉缓存区域和工作空间中的内容；
    * --mixed选项则只会用HEAD所指内容将缓存区域的内容覆盖，这就是为什么使用命令`git reset`能够将已经缓存的内容清除掉，--mixed为reset的默认选项。
    * 选项--soft则只会将HEAD移动，并不会将现在HEAD所指的内容覆盖缓存空间和工作空间。如果使用reset命令之后工作空间并未用HEAD所指的内容覆盖（--soft、--mixed选项），就会存在工作空间处于修改状态，需要提交。

== 清除已经缓存的（staged）文件 ==
* `git reset filename`		//相当于git reset --mixed HEAD filename
修改了两个文件，然后使用命令`git add .`将这两个文件的修改都提交为缓存，也就是出于staged状态。这时，如果你想撤销掉某个文件的staged状态，使用命令`git reset filename`，其实这条命令的完整表达应该是`git reset --mixed HEAD filename`。

参见《progit》的p28。

== tag记录发布版本 ==
* `git tag -a v1.0 -m 'my version 1.0`		//创建一个tag
* `git push origin --tags`			//要将在本地创建的tag提交到github上

== 多份代码拷贝的合并 ==
* `git pull ../mbooke_usb/`
区别于一份代码中有多个分支的合并，这里的应用场景描述如下：

有一份代码， *使用了git做版本控制*  。然后这份代码被拷贝了两份，然后在每一份上分别有多次提交。最后，需要把两份代码上做的修改合并到同一份代码上。

一般用于没有server端的多人协作开发，一份代码用U盘拷贝给多人开发。

使用命令git pull可以达到目的。

== git分支与合并 ==
git分支与合并主要阅读了《pro git》一书的分支一章，强烈建议。

查看现在所有分支，分支前带有*号，表示现在所在分支
* `#git branch`

创建一个新的分支
* `#git branch hotfix`	//hotfix为新创建分支名

切换到另外一个分支
* `#git checkout hotfix`	//hotfix为已经创建的分支

创建一个新的分支并且同时切换到该分支
* `#git checkout -b 'hotfix'` //hotfix为新创建分支名

删除一个分支
* `#git branch -d hotfix`	//删除hotfix分支

合并某一个分支到本身所在的分支
* #git merge hotfix	 //合并hotfix分支的修改到本身所在的分支
* #git merge --no-ff hotfix	//使用非fastfoward的方式合并分支

== git使用小技巧 ==
将修改添加到版本库中，使用git add .命令，而不要使用git add *命令。因为*代表所有的文件，那么别.gitignore文件忽略的文件（或者文件夹）也会被添加。

使用git log时要实现自动换行，不要长行截断模式，可以设置LESS环境变量（分页器）：
    #export LESS=FRX
或者，你可以配置git的分页器（pager）配置文件为-FRX。如果你想使用原来的长行截断模式，那么就使用-FRSX选项。
    #git config --global core.pager 'less -+$LESS -FRX'

中文无法显示，使用8进制字符编码来显示的问题：
    #git config --global core.quotepath false


== git diff的用法 ==
查看文件的修改情况，使用命令 git diff src。

git diff命令没有选项，不会去比较已经位于暂存区（staged）的文件和上次提交的文件的区别。所以，查看使用命令git add加载到暂存区的文件（staged）所做的修改，使用命令：
    git diff --cached

== git checkout ==
代码在回溯时，到了一个未命名的分支。

使用下面的命令，会出现该情况：
{{{
ylqmatoMac-mini:CommLibrary ylq$ git checkout 563b17
Note: checking out '563b17'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 563b178... ＊测试首页显示当前连接的mc
ylqmatoMac-mini:CommLibrary ylq$ git branch
* (no branch)
  master
  refact
}}}

== git ignore ==
The idea is to keep locally your ".DS_Store", while removing them from the git repo.

The .gitignore will work only if those ".DS_Store" are first removed from the index, hence the "git rm --cached -f" (see git rm).
{{{
find . -name ".DS_Store" -exec git rm --cached -f {} \;.
git commit -m "delete files"
git push
}}}

下面这两种写法的区别：
*.xcodeproj/*
*.xcodeproj/*


== git log的用法 ==
以适当的形式显示整个工程，或者多个文件，整个目录等的log信息。
{{{
[ny@localhost android-xbmcremote]$ git log --pretty=format:"%h - %ar : %s"
3dc5868 - 3 months ago : New release: v0.8.7 beta1
3dc5868 - 3 months ago : New release: v0.8.7 beta1
aebb506 - 4 months ago : Changed: Set network location as non-required for better tablet3dc5868 - 3 months ago : New release: v0.8.7 beta1

[ny@localhost android-xbmcremote]$ git log --date=short --pretty=format:"%h - %ad : %s"
3dc5868 - 2011-08-28 : New release: v0.8.7 beta1
aebb506 - 2011-08-14 : Changed: Set network location as non-required for better tablet support.
ced6d79 - 2011-08-14 : Changed: New icon for text entry

[ny@localhost android-xbmcremote]$ git log --date=short --pretty=format:"%ad : %s" --stat ./src/  ./res/layout/
}}}

详细的显示某次提交的log信息。


== github mac gui的sync操作 ==
两人合作开发，从某个共同的节点开始，A做了几次提交，并且上传github。B也做了几次提交，在本地。然后B使用github的mac端gui做一个syn（同步到github）。如果A和B的修改没有冲突，那么B的提交就会rebase到A的提交上，并且上传github成功，这样看上去就是一个线性的提交纪录。如果B的修改和A有冲突，那么有冲突的提交版本就会rebase失败。

此时，可以查看到git的状态如下。

{{{
nieyong@mac:~/github/DJIAssistantForIphone > git st
# Not currently on any branch.
# You are currently rebasing.
#   (fix conflicts and then run "git rebase --continue")
#   (use "git rebase --skip" to skip this patch)
#   (use "git rebase --abort" to check out the original branch)
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   AssistantForIphone/AssistantForIphone/ASSMore/ASSMore.m
#	modified:   AssistantForIphone/AssistantForIphone/ASSMore/subView/AccountsViewController.h
#	modified:   AssistantForIphone/AssistantForIphone/ASSMore/subView/AccountsViewController.m
#	new file:   AssistantForIphone/AssistantForIphone/ASSMore/subView/FeedbackViewController.h
#	new file:   AssistantForIphone/AssistantForIphone/ASSMore/subView/FeedbackViewController.m
#	new file:   AssistantForIphone/AssistantForIphone/ASSMore/subView/ImportExportParametersViewController.h
#	new file:   AssistantForIphone/AssistantForIphone/ASSMore/subView/ImportExportParametersViewController.m
#	modified:   AssistantForIphone/AssistantForIphone/ASSMore/subView/UserRegisterController.h
#	modified:   AssistantForIphone/AssistantForIphone/ASSMore/subView/UserRegisterController.m
#
# Unmerged paths:
#   (use "git reset HEAD <file>..." to unstage)
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      AssistantForIphone/AssistantForIphone.xcodeproj/project.pbxproj
}}}

此时，我们不想rabase存在，那么就使用`git rebase --abort`放弃所作的其它rebase。使用该动作之后，就可以看到下面的信息，显示refact分支和origin/refact分支分叉了。

{{{
nieyong@mac:~/github/DJIAssistantForIphone > git st
# On branch refact
# Your branch and 'origin/refact' have diverged,
# and have 3 and 2 different commits each, respectively.
#
nothing to commit, working directory clean
}}}

此时，使用merge的方式合并A和B做的提交。使用命令`git merge origin/refact`，然后解决冲突提交就OK。

整个过程，只需要明白一点，那就是github的mac gui在sync的时候，默认是做的rebase操作。知晓了这一点，其他的就迎刃而解了。

== merge 时没有合并到origin分支的警告 ==
在开发过程中，出现下面这样的警告
{{{
nieyong@mac:~/github/DJIAssistantForIphone > git br -d I18N
warning: not deleting branch 'I18N' that is not yet merged to
         'refs/remotes/origin/I18N', even though it is merged to HEAD.
error: The branch 'I18N' is not fully merged.
If you are sure you want to delete it, run 'git branch -D I18N'.
}}}

it knows that I18N is a tracking branch for origin/I18N, so it wants to know that changes done on I18N have been pushed to origin. 

git reset --hard # removes staged and working directory changes

git clean -f -d # remove untracked files
git clean -f -x -d # CAUTION: as above but removes ignored files like config.


== git中不可恢复的操作 ==
删除工作空间中的某个文件的所有修改，恢复到上一次提交时的状态。
* git checkout -- filename

如果该文件的修改已经使用`git add`提交为缓存，则不会起作用，这是需要使用`git reset HEAD .`将文件由缓存空间unstage到工作空间，然后再使用该命令撤销所有的修改。注意，对于删除了的文件，该命令也一样起效。对于新加入的文件，还处于Untrack状态，则不会起作用。


恢复到某一次提交之后的状态，删除在这次提交之后到所有提交、修改记录。
* git reset --hard HEAD~2

== 参考资料 ==
* [[http://zhwen.org/?p=articles/git|git使用总结 作者：许振文]]
* [[http://www.worldhello.net/gotgithub/index.html|GotGitHub 作者：蒋鑫]]
* [[http://progit.org/|Pro Git]]
* [[http://gitx.laullon.com/|gitx下载地址]]
