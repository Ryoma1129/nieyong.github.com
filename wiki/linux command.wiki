$sudo -s    //永久的切换到root账户
$type adb   //查看adb命令的位置


== 尚未解决的几个命令 ==
* 列出一个压缩包的最上层内容，不要解压缩，不要列举所有文件。对于一个压缩包内容很多时有用，例如linux kernel、android代码等得压缩包。
* 显示路径下的所有文件夹名，不要子文件。


== alternatives 命令 ==
这是一个只有 root 才能执行的命令。alternatives 的意思是 “可选择的内容”。假如你的系统中有几个命令功能十分类似，却又不能随意删除，那么可以用 alternatives 来指定一个全局的设置。在 FC3 中，全局默认输入法和 java 系统等等都是用它来进行设置的。它有几种功能，可以用命令行参数来指定。alternatives --install <link> <name> <path> <priority> 意思是在 alternatives 数据库中添加一个 <path>，使它成为 <link> 的可选项，优先级是 <priority>。而 <name> 则是一个中转站。这样说似乎有些抽象 所以，执行一下看看

代码:
{{{
alternatives --install /etc/X11/xinit/xinput.d/zh_CN xinput-zh_CN /etc/X11/xinit/xinput.d/scim 100
alternatives --install /etc/X11/xinit/xinput.d/zh_CN xinput-zh_CN /etc/X11/xinit/xinput.d/fcitx 99
}}}

这两个命令的意思就是将刚才新建的 scim 和 fcitx 两个文件作为 zh_CN 的可选内容。它们的优先级分别是 100 和 99，它们共同的名字是 xinput-zh_CN。

另外一种功能是选择默认值。上面的命令仅仅向数据库中添加了可选内容，接下来当然是进行选择了。可以用两种办法，第一种是 alternatives --auto <name>，这时系统会根据优先级来选择 <name> 的默认值。例如，运行

代码:
{{{
alternatives --auto xinput-zh_CN
}}}

会把默认输入法设置为 scim。(为什么？因为我们在上面指定的优先级是 100，是最高的，fcitx 只有 99)

第二种是 alternatives --config <name>，这时会显示一个对话框，大概是这样

代码:
{{{
[root@jackbillow ~]# alternatives --config xinput-zh_CN
There are 3 programs which provide 'xinput-zh_CN'.

Selection     Command
-----------------------------------------------
1          /etc/X11/xinit/xinput.d/iiimf
*+ 2          /etc/X11/xinit/xinput.d/scim
3          /etc/X11/xinit/xinput.d/fcitx

Enter to keep the current selection[+], or type selection number:
}}}

可以看到系统中已经通过 alternatives --install 添加了三个可选内容。优先级最高的是 `*`指示的那一个，目前的默认全局使用的是`+'指示的那一个。输入数字 3 就会将默认值改为fcitx，输入回车的话就不做改动。

哪种好一点？它们不会冲突，哪个都可以。要修改优先级怎么办？比如要把 fcitx 的优先级提高成 101，应该怎么办？答案很简单，再运行一次 alternatives --install 就可以了。

代码:
{{{
alternatives --install /etc/X11/xinit/xinput.d/zh_CN xinput-zh_CN /etc/X11/xinit/xinput.d/fcitx 101
}}}

需要注意的是，这样做不会修改当前的默认值，只有再运行 alternatives --auto 才会做出选择。或者，用 alternatives --config 也可以。

alternatives 还有一些功能，包括删除一个可选项等等。同样，这个设置应该由输入法的安装程序 rpm 来做。有关alternatives命令配置java的实例，参考[[Android tool chain]]。

== du命令 ==
在查看目录的使用情形时，我们可以将输出结果导到 sort 指令进行排序，以了解哪个档案用了最多的空间：
    du /etc | sort -nr | more

下面的命令能够递归查找所有文件，并且把其中所有大于50M的文件都找出来。
    find . -type f -size +1000000k 

== find命令 ==
find命令-name选项后面的参数，最好使用双引号，否则，会出现些异常问题。

查找目录（包括子目录）下所有的.DS_Store文件，并且每个文件使用`git rm`命令删除。
    find . -name ".DS_Store" -exec git rm --cached -f {} \;.

查找目录（包括子目录）下的所有后缀为.m的文件，并且将所有这些文件一次输入给`genstrings`命令，生成I18N文件（iphone开发中）。
    find . -name "*.m" | xargs genstrings -o en.lproj

查找包含某字符串的文件， 在当前路径下的所有文件中查找包含help字符的文件。
    find . -type f -name "*"|xargs grep help

批量文件编码转化，使用find命令找到所有需要转换的文件，然后使用-exec执行iconv命令单个转化。
{{{name="code" class="c"
#!/bin/bash
find . -type f -name "*.wiki" \
-exec ls '{}' \; \
-exec iconv -f gb2312 -t utf8 '{}' -o ../webutf/tmp.wiki \; \
-exec mv ../webutf/tmp.wiki ../webutf/'{}' \;
}}}

== 压缩解压缩命令(tar,zip,unzip) ==
将当前路径下的所有网页打包压缩：
    tar cjf test.tar.bz2 *.html
查看某个压缩包中的所有文件，以.tar.bz2压缩包为例：
    tar tjf test.tar.bz2

把一个文件abc.txt和一个目录dir1压缩成为yasuo.zip：
{{{
# zip -r yasuo.zip abc.txt dir1  //压缩的是个文件夹，则要加上-r参数，表示调用递归压缩
# zip -r yasuo abc.txt dir1	//不需要增加.zip后缀，也可以达到同样压缩成yasuo.zip文件的目的
}}}
查看某个zip包中的内容，但是不解压缩：
    unzip -t test.zip

在zip命令中，压缩某个目录下的所有文件，但是不包含某种类型的 *文件* ，使用-x选项：
    zip -r test.zip dir1 -x \*.o	//压缩dir1目录下所有的文件，除去所有的.o文件。其中\的目的是排除所有子目录下的.o文件。这个解释好像不完全，理解得不够，查看man zip。

在zip命令中，压缩某个目录下的所有文件，但是不包含某个子目录，这次应该怎么写呢？命令如下，下面进行详细的解释。压缩test3目录为test6.zip文件，但是不包含./test3/bin/目录下的所有文件（包括路径），也不包括./test3/.git/目录下的所有文件和目录。这里，如果将反斜杠去掉，则不能够达到去除目录的作用，则只会不包括./test3/bin/目录下的所有文件（注意，不包括目录）。
    zip -r test6 test3 -x ./test3/bin/\* -x ./test3/.git/\*	

=== tar.gz ===
tar.gz文件的基本操作：

解压缩：`tar -xzvf xxx.tar.gz`
查看包内容，-v命令表示显示详细的信息：`tar -tzvf xxx.tar.gz`

=== tar.bz2 ===
tar.bz2文件的基本操作：

解压缩：`tar -xjvf xxx.tar.bz2`


== 内存检查命令 ==
* free
* top


== dmidecode ==
dmidecode(DMI table decoder)。它可以全面的显示你系统的信息，包括bios、cpu、内存等信息。


== 我喜欢直接把用的用户提升为root ==
netseek ALL=(ALL) NOPASSWD: ALL


== 文件拷贝 ==
[ny@localhost Templates]$ cp -v test.c{,.tmp}
`test.c' -> `test.c.tmp'
文件的拷贝，文件名添加扩展


== patch  命令 ==
使用专门格式的补丁文件进行修改
-i

== nmap ==
nmap是Linux下最常使用的安全扫描工具，经典中的经典。
 

== grep，egrep命令 ==
* grep NW datafile
解释：打印datafile中包含NW的行

* grep -i 'define END_RCV_RTN_CALL' -r  ./h/*
解释：递归查找h目录下含有所示字符串的文件，忽略大小写


* grep -i -F 'void * muxDevLoad' -r  ./src/*
解释：-F选项表示使用普通字符串匹配，不使用正则表达式

* grep -R "whatever you like" * |grep -v ".svn/*" 
解释： GNU Grep含有--exclude-dir选项，如果使用Unix Grep，没有该选项，则使用以上命令。这种方式是使用管道进行双层“过滤”，其中第二次grep使用了-v选项，即逆向匹配，打印出不匹配的行。

* grep '^[we]' datafile
打印datafile中以w或者e开头的行

* egrep '2\.?[0-9]' datafile
解释：打印所有这样的行：它包含一个2，后跟0个或者一个句号，然后跟一个数字。

== 其他命令 ==
* 挂载ISO文件
#mount -o loop xxx.iso /mnt/media

* 创建一个用户
#useradd ny
#passwd ny


* 对C文件进行排版，在拷贝代码错乱的时候很有用。但是kr风格的C语言可能我们还有些不习惯，并不是公司的C语言规范标准。
#indent -kr main.c
