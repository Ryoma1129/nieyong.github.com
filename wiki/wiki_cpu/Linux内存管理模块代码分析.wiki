== 与内存映射相关的宏定义 ==
这些宏定义在`include/asm-generic/page.h`中，用于定义Linux三级分页模型中的页全局目录项pgd、页中间目录项pmd、页表项pte的数据类型，以及基本的地址转换，如下：

主要的定义有页移位数PAGE_SHIFT为12；页大小PAGE_SIZE为4KB（不使用大内存页时）；三级映射映射模型的表项数据类型pte, pmd和pgd；内核空间的物理地址与线性地址的转换`__va(x), __pa(x)`；线性地址与物理页框号的转换`virt_to_pfn(), pfn_to_virt(), virt_to_page(), page_to_virt()`。

== linux页表映射机制的建立 ==
linux页表映射机制的建立分为两个阶段，第一个阶段是内核进入保护模式之前要先建立一个临时内核页表并开启分页功能，因为在进入保护模式后，内核继续初始化直到建立完整的内存映射机制之前，仍然需要用到页表来映射相应的内存地址。对x86 32位内核，这个工作在保护模式下的内核入口函数`arch/x86/kernel/head_32.S:startup_32()`中完成。

第二阶段是建立完整的内存映射机制，在在`setup_arch()--->arch/x86/mm/init.c:init_memory_mapping()`中完成。注意对于物理地址扩展（PAE)分页机制，Intel通过在处理器上把管脚数从32增加到36已经满足了这些需求，寻址能力可以达到64GB。不过，只有引入一种新的分页机制把32位线性地址转换为36位物理地址才能使用所增加的物理地址。linux为对多种体系的支持，选择了一套简单的通用实现机制。在这里只分析x86 32位下的实现。


== 内存映射机制的完整建立 ==
根据前面介绍，这一阶段在`start_kernel()--->setup_arch()`中完成。在Linux中，物理内存被分为低端内存区和高端内存区（如果内核编译时配置了高端内存标志的话），为了建立物理内存到虚拟地址空间的映射，需要先计算出物理内存总共有多少页面数，即找出最大可用页框号，这包含了整个低端和高端内存区。还要计算出低端内存区总共占多少页面。

在`setup_arch()`，首先调用`arch/x86/kernel/e820.c:e820_end_of_ram_pfn()`找出最大可用页帧号（即总页面数），并保存在全局变量max_pfn中，这个变量定义可以在`mm/bootmem.c`中找到。它直接调用e820.c中的`e820_end_pfn()`完成工作。如下：

在内核中,这样每个区域用一个结构struct vm_area_struct 来表示.它描述的是一段连续的、具有相同访问属性的虚存空间，该虚存空间的大小为物理内存页面的整数倍。可以使用 cat /proc/<pid>/maps来查看一个进程的内存使用情况,pid是进程号.其中显示的每一行对应进程的一个vm_area_struct结构.
